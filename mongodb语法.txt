一、链接mongodb(mongo 127.0.0.1/test)
二、db语句
 选择数据库：use test1
 查看数据：db.test1.find()
 插入数据：db.test1.insert({“name”:”test1”,”age”:”123”})
 更新数据：db.test.update({name:”test1”},{$set:{name:”test2”})
 更新多条数据：db.aji.update({name:"aji2"},{$set:{age:88}},false,true)
 删除数据：db.aji.remove({name:"aji6"})
 查看索引：db.aji.getIndexes();
 删除索引：db.aji.dropIndex(“new_content”) //里面放索引名
 强制使用索引：db.aji.find().hint(“m_1”)
 创建单键索引：db.aji.ensureIndex({name:1}),注意这个索引用于排序用个，1代表正向排序，从小到大，-1代表负向排序，从大到小
 创建复合索引：db.aji.ensureIndex({name:[1,2,3,4,5,6]}),name为字段名
 过期索引：db.aji.ensureIndex({time:1},{expireAfterSeconds:30})，time为字段名。只支持IOSDate存储方式。新建方法：db.aji.insert(“time”:new Date())
 全文索引单个：db.aji.ensureIndex({content:”text”})，content为字段名，text固定的
 全文索引多个：db.aji.ensureIndex({content:”text,”content1”,”text”}),content和content都是字段名
 全面索引定义整个集合：db.aji.ensure({“$**”:”text”})
 全文索引查询：
   (1)db.aji.find({$test:{$search:”aa”}}) //查询包含aa的内容。如果多个则每个关键词用空格隔开,or的查询方式
   (2)db.aji.find({$test:{$search:”aa bb -cc”}}) -cc意思是查询不包括cc，这行意思说包含aa,bb可不括cc
   (3)db.aji.find($test:{$search:”/”aa/” /“bb/””})//查询包含aa的内容。如果多个则每个关键词用空格隔开,and的查询方式
   (4)db.aji.find($test:{$search:”aa bb”},{score:{$meta:”textScore”}),查询包含的相似度，联合sort更佳
   (5)db.aji.find($test:{$search:”aa bb”},{score:”{$meta:”textScore”}”}).sort({score:{$meta:”textScore”}})
 重明名索引名称：db.aji.ensureIndex(“content”:”1”,{name:”new_content”})
 唯一索引：db.aji.ensureIndex({“name”:1},{unique:true/false})
 稀疏索引：db.aji.ensureIndex({”name”:1“},{sparse:true})
 地理索引：
  (1)建立2d索引
	db.aji.ensureIndex({w:'2d'})
        位置表示方式：经纬度【经度，维度】
        取值范围：经度【-180,180】纬度【-90,90】
        例如：db.aji.insert({w:[180,90]})
  (2)查询2d索引
  db.aji.find({w:{$geoWithin:{$box:[[0,0],[3,3]]}}}) #左边界，右边界，矩形查找
  db.aji.find({w:{$geoWithin:{$center:[[0,0],5]}}}) # 圆心，半径，圆形查找
  db.aji.find({w:{$geoWithin:{$polygon:[[0,0],[0,1],[2,5],[7,8]]}}}) #多边形
  (3)查询集合
  db.runCommand({getNear:‘aji’,near:[x,y],minDistance:(对2d索引无效),maxDistance:num:1)}
  
  mongdostat查看mongodb的效果：mongostat -h 127.0.0.1:28018


mongodb用户权限，mongodb默认是没限制的，如果要开启远程登录权限需要以下步骤
  (1)新增管路员账号步骤如下
     【1】use admin
     【2】db.createUser({user:'admin’,pwd:'123456', roles:[{role:'root', db:'admin'}]})     //创建超级管理员用户
     【3】db.createUser({user:’Jim’,pwd:’Jim123’, roles:[{role:'userAdminAnyDatabase', db:'admin'}]})     //创建用户管理员账户（能查询其他库集合，但不能查询集合内容）
     【4】db.auth(‘Jim’,’Jim123’)  //授权用户管理员，用于创建普通用户
  (2)打开mongod.conf配置配置,把bindIp: 127.0.0.1改成bindIp: 0.0.0.0
  (3)取消这两行注释
	security:
  	   authorization: enabled
  (4)重启mongo
     service mongod restart
  (5)链接mongo,创建普通用户
      mongo 127.0.0.1:27017/admin -u Jim -p Jim123
  (6)创建普通用户，我需要创建普通用户Jim1,授予test1和test2读写权限
     【1】use test1  //进入test1数据库，用法：use+数据库名
     【2】db.createUser({user:'Jim1',pwd:'Jim123',roles:[{role:'readWrite',db:'test1'}]})  //创建用户权限，user，代表用户名，pwd代表密码，role代表角色
     【3】db.auth('Jim1','Jim123’)       //授予Jim1读写test1数据库权限，db.auth(‘用户名’,’用户密码’)
     【4】use test2  //进入test2数据库
     【5】db.createUser({user:'Jim1',pwd:'Jim123',roles:[{role:'readWrite',db:'test2’}]})  
     【6】db.auth('Jim1','Jim123’)
  (7)修改权限
     db.updateUser("Jim2",{roles:[{role:"read", db:"test2"}]}) //修改用户名Jim2,对test2变成只读权限
     db.updateUser("Jim2",{roles:[{role:"readWrite", db:"test2"}]}) //修改用户名Jim2,对test2变成读写权限
  (8)删除用户
     db.dropUser(“Jim3”)

内建的角色 
数据库用户角色：read、readWrite; 
数据库管理角色：dbAdmin、dbOwner、userAdmin； 
集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager； 
备份恢复角色：backup、restore； 
所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase 
超级用户角色：root // 这里还有几个角色间接或直接提供了系统超级用户的访问（dbOwner 、userAdmin、userAdminAnyDatabase） 
内部角色：__system 
角色说明： 
Read：允许用户读取指定数据库 
readWrite：允许用户读写指定数据库 
dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile 
userAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户 
clusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。 
readAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限 
readWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限 
userAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限 
dbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。 
root：只在admin数据库中可用。超级账号，超级权限

参照https://blog.csdn.net/jianlong727/article/details/53889990
use admin
db.createUser({user:'admin’,pwd:'123456', roles:[{role:'root', db:'admin'}]})     //创建超级管理员用户
db.createUser({user:’useradmin’,pwd:’Jim123’, roles:[{role:'userAdminAnyDatabase', db:'admin'}]})     //创建用户管理员账户（能查询其他库集合，但不能查询集合内容）
db.createUser({user:'admin',pwd:'123456', roles:[{role:'readWriteAnyDatabase', db:'admin'}]})     ---创建访问任意库读写的账户
db.createUser({user:’user1’,pwd:’user1’,roles:[{role:'readWrite',db:'test1’}]})     ---创建只对test库有读写权限的用户
db.createUser({user:"bkuser2",pwd:"Bkuser2",roles:[{role:"backup",db:"admin"}]})     ---创建用于备份时的用户，如若是恢复权限，则将backup换为restore即可
  
